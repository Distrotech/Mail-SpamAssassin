.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SpamAssassin::Client 3"
.TH Mail::SpamAssassin::Client 3 "2011-06-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SpamAssassin::Client \- Client for spamd Protocol
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  my $client = new Mail::SpamAssassin::Client({
\&                                port => 783,
\&                                host => \*(Aqlocalhost\*(Aq,
\&                                username => \*(Aqsomeuser\*(Aq});
\&  or
\&
\&  my $client = new Mail::SpamAssassin::Client({
\&                                socketpath => \*(Aq/path/to/socket\*(Aq,
\&                                username => \*(Aqsomeuser\*(Aq});
\&
\&  Optionally takes timeout, which is applied to IO::Socket for the
\&  initial connection.  If not supplied, it defaults to 30 seconds.
\&
\&  if ($client\->ping()) {
\&    print "Ping is ok\en";
\&  }
\&
\&  my $result = $client\->process($testmsg);
\&
\&  if ($result\->{isspam} eq \*(AqTrue\*(Aq) {
\&    do something with spam message here
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mail::SpamAssassin::Client is a module which provides a perl implementation of
the spamd protocol.
.SH "PUBLIC METHODS"
.IX Header "PUBLIC METHODS"
.SS "new"
.IX Subsection "new"
public class (Mail::SpamAssassin::Client) new (\e% \f(CW$args\fR)
.PP
Description:
This method creates a new Mail::SpamAssassin::Client object.
.SS "process"
.IX Subsection "process"
public instance (\e%) process (String \f(CW$msg\fR)
.PP
Description:
This method calls the spamd server with the \s-1PROCESS\s0 command.
.PP
The return value is a hash reference containing several pieces of information,
if available:
.PP
content_length
.PP
isspam
.PP
score
.PP
threshold
.PP
message
.SS "check"
.IX Subsection "check"
public instance (\e%) check (String \f(CW$msg\fR)
.PP
Description:
The method implements the check call.
.PP
See the process method for the return value.
.SS "headers"
.IX Subsection "headers"
public instance (\e%) headers (String \f(CW$msg\fR)
.PP
Description:
This method implements the headers call.
.PP
See the process method for the return value.
.SS "learn"
.IX Subsection "learn"
public instance (Boolean) learn (String \f(CW$msg\fR, Integer \f(CW$learntype\fR)
.PP
Description:
This method implements the learn call.  \f(CW$learntype\fR should be
an integer, 0 for spam, 1 for ham and 2 for forget.  The return
value is a boolean indicating if the message was learned or not.
.PP
An undef return value indicates that there was an error and you
should check the resp_code/resp_msg values to determine what
the error was.
.SS "report"
.IX Subsection "report"
public instance (Boolean) report (String \f(CW$msg\fR)
.PP
Description:
This method provides the report interface to spamd.
.SS "revoke"
.IX Subsection "revoke"
public instance (Boolean) revoke (String \f(CW$msg\fR)
.PP
Description:
This method provides the revoke interface to spamd.
.SS "ping"
.IX Subsection "ping"
public instance (Boolean) ping ()
.PP
Description:
This method performs a server ping and returns 0 or 1 depending on
if the server responded correctly.
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_create_connection"
.IX Subsection "_create_connection"
private instance (IO::Socket) _create_connection ()
.PP
Description:
This method sets up a proper IO::Socket connection based on the arguments
used when creating the client object.
.PP
On failure, it sets an internal error code and returns undef.
.SS "_parse_response_line"
.IX Subsection "_parse_response_line"
private instance (@) _parse_response_line (String \f(CW$line\fR)
.PP
Description:
This method parses the initial response line/header from the server
and returns its parts.
.PP
We have this as a separate method in case we ever decide to get fancy
with the response line.
.SS "_clear_errors"
.IX Subsection "_clear_errors"
private instance () _clear_errors ()
.PP
Description:
This method clears out any current errors.
.SS "_filter"
.IX Subsection "_filter"
private instance (\e%) _filter (String \f(CW$msg\fR, String \f(CW$command\fR)
.PP
Description:
Makes the actual call to the spamd server for the various filter method
(ie \s-1PROCESS, CHECK, HEADERS,\s0 etc).  The command that is passed in is
sent to the spamd server.
.PP
The return value is a hash reference containing several pieces of information,
if available:
.PP
content_length
.PP
isspam
.PP
score
.PP
threshold
.PP
message (if available)
