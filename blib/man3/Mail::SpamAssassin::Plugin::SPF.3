.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SpamAssassin::Plugin::SPF 3"
.TH Mail::SpamAssassin::Plugin::SPF 3 "2011-06-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mail::SpamAssassin::Plugin::SPF \- perform SPF verification tests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  loadplugin     Mail::SpamAssassin::Plugin::SPF
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This plugin checks a message against Sender Policy Framework (\s-1SPF\s0)
records published by the domain owners in \s-1DNS\s0 to fight email address
forgery and make it easier to identify spams.
.SH "USER SETTINGS"
.IX Header "USER SETTINGS"
.IP "whitelist_from_spf user@example.com" 4
.IX Item "whitelist_from_spf user@example.com"
Works similarly to whitelist_from, except that in addition to matching
a sender address, a check against the domain's \s-1SPF\s0 record must pass.
The first parameter is an address to whitelist, and the second is a string
to match the relay's rDNS.
.Sp
Just like whitelist_from, multiple addresses per line, separated by spaces,
are \s-1OK.\s0 Multiple \f(CW\*(C`whitelist_from_spf\*(C'\fR lines are also \s-1OK.\s0
.Sp
The headers checked for whitelist_from_spf addresses are the same headers
used for \s-1SPF\s0 checks (Envelope-From, Return-Path, X\-Envelope-From, etc).
.Sp
Since this whitelist requires an \s-1SPF\s0 check to be made, network tests must be
enabled. It is also required that your trust path be correctly configured.
See the section on \f(CW\*(C`trusted_networks\*(C'\fR for more info on trust paths.
.Sp
e.g.
.Sp
.Vb 2
\&  whitelist_from_spf joe@example.com fred@example.com
\&  whitelist_from_spf *@example.com
.Ve
.IP "def_whitelist_from_spf user@example.com" 4
.IX Item "def_whitelist_from_spf user@example.com"
Same as \f(CW\*(C`whitelist_from_spf\*(C'\fR, but used for the default whitelist entries
in the SpamAssassin distribution.  The whitelist score is lower, because
these are often targets for spammer spoofing.
.SH "ADMINISTRATOR OPTIONS"
.IX Header "ADMINISTRATOR OPTIONS"
.IP "spf_timeout n		(default: 5)" 4
.IX Item "spf_timeout n (default: 5)"
How many seconds to wait for an \s-1SPF\s0 query to complete, before scanning
continues without the \s-1SPF\s0 result.
.IP "do_not_use_mail_spf (0|1)		(default: 0)" 4
.IX Item "do_not_use_mail_spf (0|1) (default: 0)"
By default the plugin will try to use the Mail::SPF module for \s-1SPF\s0 checks if
it can be loaded.  If Mail::SPF cannot be used the plugin will fall back to
using the legacy Mail::SPF::Query module if it can be loaded.
.Sp
Use this option to stop the plugin from using Mail::SPF and cause it to try to
use Mail::SPF::Query instead.
.IP "do_not_use_mail_spf_query (0|1)	(default: 0)" 4
.IX Item "do_not_use_mail_spf_query (0|1) (default: 0)"
As above, but instead stop the plugin from trying to use Mail::SPF::Query and
cause it to only try to use Mail::SPF.
.IP "ignore_received_spf_header (0|1)	(default: 0)" 4
.IX Item "ignore_received_spf_header (0|1) (default: 0)"
By default, to avoid unnecessary \s-1DNS\s0 lookups, the plugin will try to use the
\&\s-1SPF\s0 results found in any \f(CW\*(C`Received\-SPF\*(C'\fR headers it finds in the message that
could only have been added by an internal relay.
.Sp
Set this option to 1 to ignore any \f(CW\*(C`Received\-SPF\*(C'\fR headers present and to have
the plugin perform the \s-1SPF\s0 check itself.
.Sp
Note that unless the plugin finds an \f(CW\*(C`identity=helo\*(C'\fR, or some unsupported
identity, it will assume that the result is a mfrom \s-1SPF\s0 check result.  The
only identities supported are \f(CW\*(C`mfrom\*(C'\fR, \f(CW\*(C`mailfrom\*(C'\fR and \f(CW\*(C`helo\*(C'\fR.
.IP "use_newest_received_spf_header (0|1)	(default: 0)" 4
.IX Item "use_newest_received_spf_header (0|1) (default: 0)"
By default, when using \f(CW\*(C`Received\-SPF\*(C'\fR headers, the plugin will attempt to use
the oldest (bottom most) \f(CW\*(C`Received\-SPF\*(C'\fR headers, that were added by internal
relays, that it can parse results from since they are the most likely to be
accurate.  This is done so that if you have an incoming mail setup where one
of your primary MXes doesn't know about a secondary \s-1MX \s0(or your MXes don't
know about some sort of forwarding relay that \s-1SA\s0 considers trusted+internal)
but \s-1SA\s0 is aware of the actual domain boundary (internal_networks setting) \s-1SA\s0
will use the results that are most accurate.
.Sp
Use this option to start with the newest (top most) \f(CW\*(C`Received\-SPF\*(C'\fR headers,
working downwards until results are successfully parsed.
