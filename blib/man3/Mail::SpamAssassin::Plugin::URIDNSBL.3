.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Mail::SpamAssassin::Plugin::URIDNSBL 3"
.TH Mail::SpamAssassin::Plugin::URIDNSBL 3 "2011-06-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
URIDNSBL \- look up URLs against DNS blocklists
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  loadplugin    Mail::SpamAssassin::Plugin::URIDNSBL
\&  uridnsbl      URIBL_SBLXBL    sbl\-xbl.spamhaus.org.   TXT
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This works by analysing message text and \s-1HTML\s0 for URLs, extracting the
domain names from those, querying their \s-1NS\s0 records in \s-1DNS,\s0 resolving
the hostnames used therein, and querying various \s-1DNS\s0 blocklists for
those \s-1IP\s0 addresses.  This is quite effective.
.SH "USER SETTINGS"
.IX Header "USER SETTINGS"
.IP "skip_uribl_checks ( 0 | 1 )   (default: 0)" 4
.IX Item "skip_uribl_checks ( 0 | 1 ) (default: 0)"
Turning on the skip_uribl_checks setting will disable the \s-1URIDNSBL\s0 plugin.
.Sp
By default, SpamAssassin will run \s-1URI DNSBL\s0 checks. Individual \s-1URI\s0 blocklists
may be disabled selectively by setting a score of a corresponding rule to 0
or through the uridnsbl_skip_domain parameter.
.Sp
See also a related configuration parameter skip_rbl_checks,
which controls the DNSEval plugin (documented in the Conf man page).
.IP "uridnsbl_skip_domain domain1 domain2 ..." 4
.IX Item "uridnsbl_skip_domain domain1 domain2 ..."
Specify a domain, or a number of domains, which should be skipped for the
\&\s-1URIBL\s0 checks.  This is very useful to specify very common domains which are
not going to be listed in URIBLs.
.IP "clear_uridnsbl_skip_domain [domain1 domain2 ...]" 4
.IX Item "clear_uridnsbl_skip_domain [domain1 domain2 ...]"
If no argument is given, then clears the entire list of domains declared
by \fIuridnsbl_skip_domain\fR configuration directives so far. Any subsequent
\&\fIuridnsbl_skip_domain\fR directives will start creating a new list of skip
domains.
.Sp
When given a list of domains as arguments, only the specified domains
are removed from the list of skipped domains.
.SH "RULE DEFINITIONS AND PRIVILEGED SETTINGS"
.IX Header "RULE DEFINITIONS AND PRIVILEGED SETTINGS"
.IP "uridnsbl \s-1NAME_OF_RULE\s0 dnsbl_zone lookuptype" 4
.IX Item "uridnsbl NAME_OF_RULE dnsbl_zone lookuptype"
Specify a lookup.  \f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule to be
used, \f(CW\*(C`dnsbl_zone\*(C'\fR is the zone to look up IPs in, and \f(CW\*(C`lookuptype\*(C'\fR
is the type of lookup (\fB\s-1TXT\s0\fR or \fBA\fR).   Note that you must also
define a body-eval rule calling \f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.Sp
Example:
.Sp
.Vb 3
\& uridnsbl        URIBL_SBLXBL    sbl\-xbl.spamhaus.org.   TXT
\& body            URIBL_SBLXBL    eval:check_uridnsbl(\*(AqURIBL_SBLXBL\*(Aq)
\& describe        URIBL_SBLXBL    Contains a URL listed in the SBL/XBL blocklist
.Ve
.IP "uridnssub \s-1NAME_OF_RULE\s0 dnsbl_zone lookuptype subtest" 4
.IX Item "uridnssub NAME_OF_RULE dnsbl_zone lookuptype subtest"
Specify a DNSBL-style domain lookup with a sub-test.  \f(CW\*(C`NAME_OF_RULE\*(C'\fR is the
name of the rule to be used, \f(CW\*(C`dnsbl_zone\*(C'\fR is the zone to look up IPs in,
and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or \fBA\fR).
.Sp
\&\f(CW\*(C`subtest\*(C'\fR is a sub-test to run against the returned data.  The sub-test may
be in one of the following forms: m, n1\-n2, or n/m, where n,n1,n2,m can be
any of: decimal digits, 0x followed by up to 8 hexadecimal digits, or an IPv4
address in quad-dot form. The 'A' records (IPv4 dotted address) as returned
by DNSBLs lookups are converted into a numerical form (r) and checked against
the specified sub-test as follows:
for a range n1\-n2 the following must be true: (r >= n1 && r <= n2);
for a n/m form the following must be true: (r & m) == (n & m);
for a single value in quad-dot form the following must be true: r == n;
for a single decimal or hex form the following must be true: (r & n) != 0.
.Sp
Some typical examples of a sub-test are: 127.0.1.2, 127.0.1.20\-127.0.1.39,
127.0.1.0/255.255.255.0, 0.0.0.16/0.0.0.16, 0x10/0x10, 16, 0x10 .
.Sp
Note that, as with \f(CW\*(C`uridnsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.Sp
Example:
.Sp
.Vb 2
\&  uridnssub   URIBL_DNSBL_4    dnsbl.example.org.   A    127.0.0.4
\&  uridnssub   URIBL_DNSBL_8    dnsbl.example.org.   A    8
.Ve
.IP "urirhsbl \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype" 4
.IX Item "urirhsbl NAME_OF_RULE rhsbl_zone lookuptype"
Specify a RHSBL-style domain lookup.  \f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule
to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone to look up domain names in, and
\&\f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or \fBA\fR).   Note that you must also
define a body-eval rule calling \f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.Sp
An \s-1RHSBL\s0 zone is one where the domain name is looked up, as a string; e.g. a
\&\s-1URI\s0 using the domain \f(CW\*(C`foo.com\*(C'\fR will cause a lookup of
\&\f(CW\*(C`foo.com.uriblzone.net\*(C'\fR.  Note that hostnames are stripped from the domain
used in the \s-1URIBL\s0 lookup, so the domain \f(CW\*(C`foo.bar.com\*(C'\fR will look up
\&\f(CW\*(C`bar.com.uriblzone.net\*(C'\fR, and \f(CW\*(C`foo.bar.co.uk\*(C'\fR will look up
\&\f(CW\*(C`bar.co.uk.uriblzone.net\*(C'\fR.
.Sp
If an \s-1URI\s0 consists of an \s-1IP\s0 address instead of a hostname, the \s-1IP\s0 address is
looked up (using the standard reversed quads method) in each \f(CW\*(C`rhsbl_zone\*(C'\fR.
.Sp
Example:
.Sp
.Vb 1
\&  urirhsbl        URIBL_RHSBL    rhsbl.example.org.   TXT
.Ve
.IP "urirhssub \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype subtest" 4
.IX Item "urirhssub NAME_OF_RULE rhsbl_zone lookuptype subtest"
Specify a RHSBL-style domain lookup with a sub-test.  \f(CW\*(C`NAME_OF_RULE\*(C'\fR is the
name of the rule to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone to look up domain names
in, and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or \fBA\fR).
.Sp
\&\f(CW\*(C`subtest\*(C'\fR is a sub-test to run against the returned data.  The sub-test may
be in one of the following forms: m, n1\-n2, or n/m, where n,n1,n2,m can be
any of: decimal digits, 0x followed by up to 8 hexadecimal digits, or an IPv4
address in quad-dot form. The 'A' records (IPv4 dotted address) as returned
by DNSBLs lookups are converted into a numerical form (r) and checked against
the specified sub-test as follows:
for a range n1\-n2 the following must be true: (r >= n1 && r <= n2);
for a n/m form the following must be true: (r & m) == (n & m);
for a single value in quad-dot form the following must be true: r == n;
for a single decimal or hex form the following must be true: (r & n) != 0.
.Sp
Some typical examples of a sub-test are: 127.0.1.2, 127.0.1.20\-127.0.1.39,
127.2.3.0/255.255.255.0, 0.0.0.16/0.0.0.16, 0x10/0x10, 16, 0x10 .
.Sp
Note that, as with \f(CW\*(C`urirhsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.Sp
Example:
.Sp
.Vb 2
\&  urirhssub   URIBL_RHSBL_4    rhsbl.example.org.   A    127.0.0.4
\&  urirhssub   URIBL_RHSBL_8    rhsbl.example.org.   A    8
.Ve
.IP "urinsrhsbl \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype" 4
.IX Item "urinsrhsbl NAME_OF_RULE rhsbl_zone lookuptype"
Perform a RHSBL-style domain lookup against the contents of the \s-1NS\s0 records
for each \s-1URI. \s0 In other words, a \s-1URI\s0 using the domain \f(CW\*(C`foo.com\*(C'\fR will cause
an \s-1NS\s0 lookup to take place; assuming that domain has an \s-1NS\s0 of \f(CW\*(C`ns0.bar.com\*(C'\fR,
that will cause a lookup of \f(CW\*(C`bar.com.uriblzone.net\*(C'\fR.  Note that hostnames
are stripped from both the domain used in the \s-1URI,\s0 and the domain in the
lookup.
.Sp
\&\f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone
to look up domain names in, and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or
\&\fBA\fR).
.Sp
Note that, as with \f(CW\*(C`urirhsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.IP "urinsrhssub \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype subtest" 4
.IX Item "urinsrhssub NAME_OF_RULE rhsbl_zone lookuptype subtest"
Specify a RHSBL-style domain-NS lookup, as above, with a sub-test.
\&\f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone
to look up domain names in, and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or
\&\fBA\fR).  \f(CW\*(C`subtest\*(C'\fR is the sub-test to run against the returned data; see
<urirhssub>.
.Sp
Note that, as with \f(CW\*(C`urirhsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.IP "urifullnsrhsbl \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype" 4
.IX Item "urifullnsrhsbl NAME_OF_RULE rhsbl_zone lookuptype"
Perform a RHSBL-style domain lookup against the contents of the \s-1NS\s0 records for
each \s-1URI. \s0 In other words, a \s-1URI\s0 using the domain \f(CW\*(C`foo.com\*(C'\fR will cause an \s-1NS\s0
lookup to take place; assuming that domain has an \s-1NS\s0 of \f(CW\*(C`ns0.bar.com\*(C'\fR, that
will cause a lookup of \f(CW\*(C`ns0.bar.com.uriblzone.net\*(C'\fR.  Note that hostnames are
stripped from the domain used in the \s-1URI.\s0
.Sp
\&\f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone
to look up domain names in, and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or
\&\fBA\fR).
.Sp
Note that, as with \f(CW\*(C`urirhsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.IP "urifullnsrhssub \s-1NAME_OF_RULE\s0 rhsbl_zone lookuptype subtest" 4
.IX Item "urifullnsrhssub NAME_OF_RULE rhsbl_zone lookuptype subtest"
Specify a RHSBL-style domain-NS lookup, as above, with a sub-test.
\&\f(CW\*(C`NAME_OF_RULE\*(C'\fR is the name of the rule to be used, \f(CW\*(C`rhsbl_zone\*(C'\fR is the zone
to look up domain names in, and \f(CW\*(C`lookuptype\*(C'\fR is the type of lookup (\fB\s-1TXT\s0\fR or
\&\fBA\fR).  \f(CW\*(C`subtest\*(C'\fR is the sub-test to run against the returned data; see
<urirhssub>.
.Sp
Note that, as with \f(CW\*(C`urirhsbl\*(C'\fR, you must also define a body-eval rule calling
\&\f(CW\*(C`check_uridnsbl()\*(C'\fR to use this.
.IP "tflags \s-1NAME_OF_RULE\s0 ips_only" 4
.IX Item "tflags NAME_OF_RULE ips_only"
Only URIs containing \s-1IP\s0 addresses as the \*(L"host\*(R" component will be matched
against the named \*(L"urirhsbl\*(R"/\*(L"urirhssub\*(R" rule.
.IP "tflags \s-1NAME_OF_RULE\s0 domains_only" 4
.IX Item "tflags NAME_OF_RULE domains_only"
Only URIs containing a non-IP-address \*(L"host\*(R" component will be matched against
the named \*(L"urirhsbl\*(R"/\*(L"urirhssub\*(R" rule.
.SH "ADMINISTRATOR SETTINGS"
.IX Header "ADMINISTRATOR SETTINGS"
.IP "uridnsbl_max_domains N		(default: 20)" 4
.IX Item "uridnsbl_max_domains N (default: 20)"
The maximum number of domains to look up.
.SH "NOTES"
.IX Header "NOTES"
The \f(CW\*(C`uridnsbl_timeout\*(C'\fR option has been obsoleted by the \f(CW\*(C`rbl_timeout\*(C'\fR
option.  See the \f(CW\*(C`Mail::SpamAssassin::Conf\*(C'\fR \s-1POD\s0 for details on \f(CW\*(C`rbl_timeout\*(C'\fR.
