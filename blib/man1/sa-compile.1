.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SA-COMPILE 1"
.TH SA-COMPILE 1 "2014-01-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sa\-compile \- compile SpamAssassin ruleset into native code
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBsa-compile\fR [options]
.PP
Options:
.PP
.Vb 10
\&  \-\-list                        Output base string list to STDOUT
\&  \-\-sudo                        Use \*(Aqsudo\*(Aq for privilege escalation
\&  \-\-keep\-tmps                   Keep temporary files instead of deleting
\&  \-C path, \-\-configpath=path, \-\-config\-file=path
\&                                Path to standard configuration dir
\&  \-p prefs, \-\-prefspath=file, \-\-prefs\-file=file
\&                                Set user preferences file
\&  \-\-siteconfigpath=path         Path for site configs
\&                                (default: /etc/mail/spamassassin)
\&  \-\-updatedir=path              Directory to place updates
\&          (default: /var/lib/spamassassin/compiled/<perlversion>/3.003002)
\&  \-\-cf=\*(Aqconfig line\*(Aq            Additional line of configuration
\&  \-D, \-\-debug [area=n,...]      Print debugging messages
\&  \-V, \-\-version                 Print version
\&  \-h, \-\-help                    Print usage message
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
sa-compile uses \f(CW\*(C`re2c\*(C'\fR to compile the site-wide parts of the SpamAssassin
ruleset. No part of user_prefs or any files included from user_prefs can be
built into the compiled set.
.PP
This compiled set is then used by the 
\&\f(CW\*(C`Mail::SpamAssassin::Plugin::Rule2XSBody\*(C'\fR plugin to speed up
SpamAssassin's operation, where possible, and when that plugin is loaded.
.PP
\&\f(CW\*(C`re2c\*(C'\fR can match strings much faster than perl code, by constructing a \s-1DFA\s0 to
match many simple strings in parallel, and compiling that to native object
code.  Not all SpamAssassin rules are amenable to this conversion, however.
.PP
This requires \f(CW\*(C`re2c\*(C'\fR (see \f(CW\*(C`http://re2c.org/\*(C'\fR), and the C
compiler used to build Perl \s-1XS\s0 modules, be installed.
.PP
Note that running this, and creating a compiled ruleset, will have no
effect on SpamAssassin scanning speeds unless you also edit your \f(CW\*(C`v320.pre\*(C'\fR
file and ensure this line is uncommented:
.PP
.Vb 1
\&  loadplugin Mail::SpamAssassin::Plugin::Rule2XSBody
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-list\fR" 4
.IX Item "--list"
Output the extracted base strings to \s-1STDOUT,\s0 instead of generating
the C extension code.
.IP "\fB\-\-sudo\fR" 4
.IX Item "--sudo"
Use \f(CWsudo(8)\fR to run code as 'root' when writing files to the compiled-rules
storage area (which is \f(CW\*(C`/var/lib/spamassassin/compiled/5.018/3.003002\*(C'\fR by default).
.IP "\fB\-\-quiet\fR" 4
.IX Item "--quiet"
Produce less diagnostic output.  Errors will still be displayed.
.IP "\fB\-\-keep\-tmps\fR" 4
.IX Item "--keep-tmps"
Keep temporary files after the script completes, instead of
deleting them.
.IP "\fB\-C\fR \fIpath\fR, \fB\-\-configpath\fR=\fIpath\fR, \fB\-\-config\-file\fR=\fIpath\fR" 4
.IX Item "-C path, --configpath=path, --config-file=path"
Use the specified path for locating the distributed configuration files.
Ignore the default directories (usually \f(CW\*(C`/usr/share/spamassassin\*(C'\fR or similar).
.IP "\fB\-\-siteconfigpath\fR=\fIpath\fR" 4
.IX Item "--siteconfigpath=path"
Use the specified path for locating site-specific configuration files.  Ignore
the default directories (usually \f(CW\*(C`/etc/mail/spamassassin\*(C'\fR or similar).
.IP "\fB\-\-updatedir\fR" 4
.IX Item "--updatedir"
By default, \f(CW\*(C`sa\-compile\*(C'\fR will use the system-wide rules update directory:
.Sp
.Vb 1
\&        /var/lib/spamassassin/compiled/5.018/3.003002
.Ve
.Sp
If the updates should be stored in another location, specify it here.
.Sp
Note that use of this option is not recommended; if sa-compile is placing the
compiled rules the wrong directory, you probably need to rebuild SpamAssassin
with different \f(CW\*(C`Makefile.PL\*(C'\fR arguments, instead of overriding sa-compile's
runtime behaviour.
.IP "\fB\-\-cf='config line'\fR" 4
.IX Item "--cf='config line'"
Add additional lines of configuration directly from the command-line, parsed
after the configuration files are read.   Multiple \fB\-\-cf\fR arguments can be
used, and each will be considered a separate line of configuration.
.IP "\fB\-p\fR \fIprefs\fR, \fB\-\-prefspath\fR=\fIprefs\fR, \fB\-\-prefs\-file\fR=\fIprefs\fR" 4
.IX Item "-p prefs, --prefspath=prefs, --prefs-file=prefs"
Read user score preferences from \fIprefs\fR (usually
\&\f(CW\*(C`$HOME/.spamassassin/user_prefs\*(C'\fR) .
.IP "\fB\-D\fR [\fIarea,...\fR], \fB\-\-debug\fR [\fIarea,...\fR]" 4
.IX Item "-D [area,...], --debug [area,...]"
Produce debugging output.  If no areas are listed, all debugging information is
printed.  Diagnostic output can also be enabled for each area individually;
\&\fIarea\fR is the area of the code to instrument.
.Sp
For more information about which areas (also known as channels) are
available, please see the documentation at
<http://wiki.apache.org/spamassassin/DebugChannels>.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print help message and exit.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Print sa-compile version and exit.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIMail::SpamAssassin\fR\|(3)
\&\fIspamassassin\fR\|(1)
\&\fIspamd\fR\|(1)
.SH "PREREQUESITES"
.IX Header "PREREQUESITES"
\&\f(CW\*(C`Mail::SpamAssassin\*(C'\fR
\&\f(CW\*(C`re2c\*(C'\fR
\&\f(CW\*(C`Mail::SpamAssassin::Plugin::Rule2XSBody\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
See <http://issues.apache.org/SpamAssassin/>
.SH "AUTHORS"
.IX Header "AUTHORS"
The Apache SpamAssassin(tm) Project <http://spamassassin.apache.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
SpamAssassin is distributed under the Apache License, Version 2.0, as
described in the file \f(CW\*(C`LICENSE\*(C'\fR included with the distribution.
