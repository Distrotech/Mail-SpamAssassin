.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "SPAMC 1"
.TH SPAMC 1 "2011-06-07" "perl v5.18.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
spamc \- client for spamd
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.IP "spamc [options] < message" 4
.IX Item "spamc [options] < message"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Spamc is the client half of the spamc/spamd pair.  It should be used in place
of \f(CW\*(C`spamassassin\*(C'\fR in scripts to process mail.  It will read the mail from
\&\s-1STDIN,\s0 and spool it to its connection to spamd, then read the result back and
print it to \s-1STDOUT. \s0 Spamc has extremely low overhead in loading, so it should
be much faster to load than the whole spamassassin program.
.PP
See the \fI\s-1README\s0\fR file in the \fIspamd\fR directory of the SpamAssassin
distribution for more details.
.SH "OPTIONS"
.IX Header "OPTIONS"
All options detailed below can be passed as command line arguments, or be
contained in a configuration file, as described in the \fB\s-1CONFIGURATION FILE\s0\fR
section below.
.PP
Note that the long options, a la \f(CW\*(C`\-\-long\-options\*(C'\fR, are new as of
SpamAssassin 3.2.0, and were not available in earlier versions.
.IP "\fB\-B\fR, \fB\-\-bsmtp\fR" 4
.IX Item "-B, --bsmtp"
Assume input is a single BSMTP-formatted message. In other words, spamc will
pull out everything between the \s-1DATA\s0 line and the lone-dot line to feed to
spamd, and will place the spamd output back in the same envelope (thus, any
\&\s-1SIZE\s0 extension in your \s-1BSMTP\s0 file will cause many problems).
.IP "\fB\-c\fR, \fB\-\-check\fR" 4
.IX Item "-c, --check"
Just check if the message is spam or not.  Set process exitcode to 1 if
message is spam, 0 if not spam or processing failure occurs.  Will print
score/threshold to stdout (as ints) or 0/0 if there was an error.
Combining \fB\-c\fR and \fB\-E\fR is a no-op, since \fB\-c\fR implies the behaviour
of \fB\-E\fR.
.IP "\fB\-d\fR \fIhost[,host2]\fR, \fB\-\-dest\fR=\fIhost[,host2]\fR" 4
.IX Item "-d host[,host2], --dest=host[,host2]"
In \s-1TCP/IP\s0 mode, connect to spamd server on given host (default: localhost).
Several hosts can be specified if separated by commas.
.Sp
If \fIhost\fR resolves to multiple addresses, then spamc will fail-over to the 
other addresses, if the first one cannot be connected to.  It will first try
all addresses of one host before it tries the next one in the list.
Note that this fail-over behaviour is incompatible with \fB\-x\fR; if that
switch is used, fail-over will not occur.
.IP "\fB\-e\fR \fIcommand\fR \fI[args]\fR, \fB\-\-pipe\-to\fR \fIcommand\fR \fI[args]\fR" 4
.IX Item "-e command [args], --pipe-to command [args]"
Instead of writing to stdout, pipe the output to \fIcommand\fR's standard input.
Note that there is a very slight chance mail will be lost here, because if the
fork-and-exec fails there's no place to put the mail message.
.Sp
Note that this must be the \s-1LAST\s0 command line option, as everything after the
\&\fB\-e\fR is taken as arguments to the command (it's like \fIrxvt\fR or \fIxterm\fR).
.Sp
This option is not supported on Win32 platforms.
.IP "\fB\-E\fR, \fB\-\-exitcode\fR" 4
.IX Item "-E, --exitcode"
Filter according to the other options, but set the process exitcode to 1 if
message is spam, 0 if not spam or processing failure occurs.
.IP "\fB\-F\fR \fI/path/to/file\fR, \fB\-\-config\fR=\fIpath\fR" 4
.IX Item "-F /path/to/file, --config=path"
Specify a configuration file to read additional command-line flags from.
See \fB\s-1CONFIGURATION FILE\s0\fR below.
.IP "\fB\-h\fR, \fB\-\-help\fR" 4
.IX Item "-h, --help"
Print this help message and terminate without action.
.IP "\fB\-H\fR, \fB\-\-randomize\fR" 4
.IX Item "-H, --randomize"
For \s-1TCP/IP\s0 sockets, randomize the \s-1IP\s0 addresses returned for the hosts given
by the \fB\-d\fR switch. This provides for a simple kind of load balancing.  It
will try only three times though.
.IP "\fB\-l\fR, \fB\-\-log\-to\-stderr\fR" 4
.IX Item "-l, --log-to-stderr"
Send log messages to stderr, instead of to the syslog.
.IP "\fB\-L\fR \fIlearn type\fR, \fB\-\-learntype\fR=\fItype\fR" 4
.IX Item "-L learn type, --learntype=type"
Send message to spamd for learning.  The \f(CW\*(C`learn type\*(C'\fR can be either spam,
ham or forget.  The exitcode for spamc will be set to 5 if the message
was learned, or 6 if it was already learned, under a condition that
a \fB\-\-no\-safe\-fallback\fR option is selected too.
.Sp
Note that the \f(CW\*(C`spamd\*(C'\fR must run with the \f(CW\*(C`\-\-allow\-tell\*(C'\fR option for
this to work.
.IP "\fB\-C\fR \fIreport type\fR, \fB\-\-reporttype\fR=\fItype\fR" 4
.IX Item "-C report type, --reporttype=type"
Report or revoke a message to one of the configured collaborative filtering
databases.  The \f(CW\*(C`report type\*(C'\fR can be either report or revoke.
.Sp
Note that the \f(CW\*(C`spamd\*(C'\fR must run with the \f(CW\*(C`\-\-allow\-tell\*(C'\fR option for
this to work.
.IP "\fB\-p\fR \fIport\fR, \fB\-\-port\fR=\fIport\fR" 4
.IX Item "-p port, --port=port"
In \s-1TCP/IP\s0 mode, connect to spamd server listening on given port 
(default: 783).
.IP "\fB\-r\fR, \fB\-\-full\-spam\fR" 4
.IX Item "-r, --full-spam"
Just output the SpamAssassin report text to stdout, if the message is
spam.  If the message is ham (non-spam), nothing will be printed.  The
first line of the output is the message score and the threshold, in
this format:
.Sp
.Vb 1
\&        score/threshold
.Ve
.IP "\fB\-R\fR, \fB\-\-full\fR" 4
.IX Item "-R, --full"
Just output the SpamAssassin report text to stdout, for all messages.
See \fB\-r\fR for details of the output format used.
.IP "\fB\-s\fR \fImax_size\fR, \fB\-\-max\-size\fR=\fImax_size\fR" 4
.IX Item "-s max_size, --max-size=max_size"
Set the maximum message size which will be sent to spamd \*(-- any bigger than
this threshold and the message will be returned unprocessed (default: 500 \s-1KB\s0).
If spamc gets handed a message bigger than this, it won't be passed to spamd.
The maximum message size is 256 \s-1MB.\s0
.Sp
The size is specified in bytes, as a positive integer greater than 0.
For example, \fB\-s 500000\fR.
.IP "\fB\-\-connect\-retries\fR=\fIretries\fR" 4
.IX Item "--connect-retries=retries"
Retry connecting to spamd \fIretries\fR times.  The default is 3 times.
.IP "\fB\-\-retry\-sleep\fR=\fIsleep\fR" 4
.IX Item "--retry-sleep=sleep"
Sleep for \fIsleep\fR seconds between attempts to connect to spamd.
The default is 1 second.
.IP "\fB\-\-filter\-retries\fR=\fIretries\fR" 4
.IX Item "--filter-retries=retries"
Retry filtering \fIretries\fR times if the spamd process fails (usually times
out).  This differs from \fB\-\-connect\-retries\fR in that it times out the
transaction after the \s-1TCP\s0 connection has been established successfully.
The default is 1 time (ie. one attempt and no retries).
.IP "\fB\-\-filter\-retry\-sleep\fR=\fIsleep\fR" 4
.IX Item "--filter-retry-sleep=sleep"
Sleep for \fIsleep\fR seconds between failed spamd filtering attempts.
The default is 1 second.
.IP "\fB\-S\fR, \fB\-\-ssl\fR, \fB\-\-ssl\fR=\fIsslversion\fR" 4
.IX Item "-S, --ssl, --ssl=sslversion"
If spamc was built with support for \s-1SSL,\s0 encrypt data to and from the
spamd process with \s-1SSL\s0; spamd must support \s-1SSL\s0 as well.
\&\fIsslversion\fR specifies the \s-1SSL\s0 protocol version to use, one of
\&\f(CW\*(C`sslv2\*(C'\fR, \f(CW\*(C`sslv3\*(C'\fR, \f(CW\*(C`tlsv1\*(C'\fR, or \f(CW\*(C`sslv23\*(C'\fR. The default, \f(CW\*(C`sslv23\*(C'\fR, causes
spamc to use a SSLv2 hello handshake then negotiate use of SSLv3 or TLSv1
protocol if the spamd server can accept it.
.IP "\fB\-t\fR \fItimeout\fR, \fB\-\-timeout\fR=\fItimeout\fR" 4
.IX Item "-t timeout, --timeout=timeout"
Set the timeout for spamc-to-spamd communications (default: 600, 0 disables).
If spamd takes longer than this many seconds to reply to a message, spamc 
will abort the connection and treat this as a failure to connect; in other 
words the message will be returned unprocessed.
.IP "\fB\-n\fR \fItimeout\fR, \fB\-\-connect\-timeout\fR=\fItimeout\fR" 4
.IX Item "-n timeout, --connect-timeout=timeout"
Set the timeout for spamc-to-spamd connection establishment (default: 600, 0
disables). If spamc takes longer than this many seconds to establish a
connection to spamd, spamc will abort the connection and treat this as a
failure to connect; in other words the message will be returned unprocessed.
.IP "\fB\-u\fR \fIusername\fR, \fB\-\-username\fR=\fIusername\fR" 4
.IX Item "-u username, --username=username"
To have spamd use per-user-config files, run spamc as the user whose config
files spamd should load; by default the effective user-ID is sent to spamd.  If
you're running spamc as some other user, though, (eg. root, mail, nobody,
cyrus, etc.) then you may use this flag to override the default.
.IP "\fB\-U\fR \fIsocketpath\fR, \fB\-\-socket\fR=\fIpath\fR" 4
.IX Item "-U socketpath, --socket=path"
Connect to \f(CW\*(C`spamd\*(C'\fR via \s-1UNIX\s0 domain socket \fIsocketpath\fR instead of a
\&\s-1TCP/IP\s0 connection.
.Sp
This option is not supported on Win32 platforms.
.IP "\fB\-V\fR, \fB\-\-version\fR" 4
.IX Item "-V, --version"
Report the version of this \f(CW\*(C`spamc\*(C'\fR client.  If built with \s-1SSL\s0 support,
an additional line will be included noting this, like so:
.Sp
.Vb 2
\&  SpamAssassin Client version 3.0.0\-rc4
\&    compiled with SSL support (OpenSSL 0.9.7d 17 Mar 2004)
.Ve
.IP "\fB\-x\fR, \fB\-\-no\-safe\-fallback\fR" 4
.IX Item "-x, --no-safe-fallback"
Disables the 'safe fallback' error-recovery method, which passes through the
unaltered message if an error occurs.  Instead, exit with an error code, and
let the \s-1MTA\s0 queue up the mails for a retry later.  See also \*(L"\s-1EXIT CODES\*(R"\s0.
.Sp
This also disables the \s-1TCP\s0 fail-over behaviour from \fB\-d\fR.
.IP "\fB\-y\fR, \fB\-\-tests\fR" 4
.IX Item "-y, --tests"
Just output the names of the tests hit to stdout, on one line, separated
by commas.
.IP "\fB\-K\fR" 4
.IX Item "-K"
Perform a keep-alive check of spamd, instead of a full message check.
.IP "\fB\-z\fR" 4
.IX Item "-z"
Use gzip compression to compress the mail message sent to \f(CW\*(C`spamd\*(C'\fR. This is
useful for long-distance use of spamc over the internet. Note that this relies
on \f(CW\*(C`zlib\*(C'\fR being installed on the \f(CW\*(C`spamc\*(C'\fR client side, and the
\&\f(CW\*(C`Compress::Zlib\*(C'\fR perl module on the server side; an error will be returned
otherwise.
.IP "\fB\-\-headers\fR" 4
.IX Item "--headers"
Perform a scan, but instead of allowing any part of the message (header and
body) to be rewritten, limit rewriting to only the message headers. This is
much more efficient in bandwidth usage, since the response message transmitted
back from the spamd server will not include the body.
.Sp
Note that this only makes sense if you are using \f(CW\*(C`report_safe 0\*(C'\fR in the
scanning configuration on the remote end; with \f(CW\*(C`report_safe 1\*(C'\fR, it is
likely to result in corrupt messages.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The above command-line switches can also be loaded from a configuration
file.
.PP
The format of the file is similar to the SpamAssassin rules files; blank lines
and lines beginning with \f(CW\*(C`#\*(C'\fR are ignored.  Any space-separated words are
considered additions to the command line, and are prepended. Newlines are
treated as equivalent to spaces. Existing command line switches will override
any settings in the configuration file.
.PP
If the \fB\-F\fR switch is specified, that file will be used.  Otherwise,
\&\f(CW\*(C`spamc\*(C'\fR will attempt to load spamc.conf in \f(CW\*(C`SYSCONFDIR\*(C'\fR (default:
/etc/mail/spamassassin). If that file doesn't exist, and the \fB\-F\fR
switch is not specified, no configuration file will be read.
.PP
Example:
.PP
.Vb 1
\&    # spamc global configuration file 
\&    
\&    # connect to "server.example.com", port 783
\&    \-d server.example.com
\&    \-p 783
\&
\&    # max message size for scanning = 350k
\&    \-s 350000
.Ve
.SH "EXIT CODES"
.IX Header "EXIT CODES"
By default, spamc will use the 'safe fallback' error recovery method.  That 
means, it will always exit with an exit code if \f(CW0\fR, even if an error was 
encountered.  If any error occurrs, it will simply pass through the unaltered 
message.
.PP
The \fB\-c\fR and \fB\-E\fR options modify this; instead, spamc will use an exit code
of \f(CW1\fR if the message is determined to be spam.
.PP
If one of the \f(CW\*(C`\-x\*(C'\fR, \f(CW\*(C`\-L\*(C'\fR or \f(CW\*(C`\-C\*(C'\fR options are specified, 'safe fallback' will
be disabled, and certain error conditions related to communication between
spamc and spamd will result in an error code.  The exit codes used are as
follows:
.PP
.Vb 10
\&    EX_USAGE        64  command line usage error
\&    EX_DATAERR      65  data format error       
\&    EX_NOINPUT      66  cannot open input
\&    EX_NOUSER       67  addressee unknown
\&    EX_NOHOST       68  host name unknown
\&    EX_UNAVAILABLE  69  service unavailable
\&    EX_SOFTWARE     70  internal software error
\&    EX_OSERR        71  system error (e.g., can\*(Aqt fork)
\&    EX_OSFILE       72  critical OS file missing
\&    EX_CANTCREAT    73  can\*(Aqt create (user) output file
\&    EX_IOERR        74  input/output error
\&    EX_TEMPFAIL     75  temp failure; user is invited to retry
\&    EX_PROTOCOL     76  remote error in protocol
\&    EX_NOPERM       77  permission denied
\&    EX_CONFIG       78  configuration error
\&    EX_TOOBIG       98  message was too big to process (see \-\-max\-size)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIspamd\fR\|(1)
\&\fIspamassassin\fR\|(1)
\&\fIMail::SpamAssassin\fR\|(3)
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
\&\f(CW\*(C`Mail::SpamAssassin\*(C'\fR
.SH "AUTHORS"
.IX Header "AUTHORS"
The SpamAssassin(tm) Project <http://spamassassin.apache.org/>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
SpamAssassin is distributed under the Apache License, Version 2.0, as
described in the file \f(CW\*(C`LICENSE\*(C'\fR included with the distribution.
